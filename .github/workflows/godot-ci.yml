name: "Godot CI"
on:
  workflow_dispatch:
  push:
    branches: [main]
    release:
      types: [created]

concurrency: ci-${{ github.ref }}

jobs:
  godot-export:
    strategy:
      matrix:
        export_template: ["Windows", "HTML5"]
        godot_version: [3.4]
    name: Godot Export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:${{ matrix.godot_version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Setup Export Templates
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${{ matrix.godot_version }}.stable ~/.local/share/godot/templates/${{ matrix.godot_version }}.stable
      - name: Build Project
        run: |
          mkdir -v -p "build"
          godot -v --export "${{ matrix.export_template }}"
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.export_template }}
          path: build/
      - name: Publish to GitHub Pages
        if: matrix.export_template == 'HTML5'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build

  github-release:
    needs: godot-export
    name: GitHub Release
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:3.4
    if: github.event_name == 'release' && github.event.action == 'created'
    env:
      ARTIFACT_PATH: artifacts
      PROJECT_NAME: ${{ github.event.repository.name }}
      RELEASE_NAME: ${{ github.event.release.name }}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.ARTIFACT_PATH }}
      - name: Upload to Itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
        working-directory: ${{ env.ARTIFACT_PATH }}
        run: for dir in */; do butler push ./$dir "${{ secrets.ITCH_IO_USERNAME }}/${{ env.PROJECT_NAME }}:${dir%/}" --userversion "${{ env.RELEASE_NAME }}"; done
      - name: Zip Artifacts
        working-directory: ${{ env.ARTIFACT_PATH }}
        run: for dir in */; do ( cd "$dir"; zip -r "${{ env.PROJECT_NAME }}-${dir%/}-${{ env.RELEASE_NAME }}.zip" . ); done
      - name: Display glob pattern output
        run: ls -lrt ./${{ env.ARTIFACT_PATH }}/**/*.zip
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./${{ env.ARTIFACT_PATH }}/**/*.zip
          generate_release_notes: true
